/**
 *  Run Lutron
 *
 *  Copyright 2015 Bruce Ravenel
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Run Lutron",
    namespace: "bravenel",
    author: "Bruce Ravenel",
    description: "Create virtual devices for each Lutron device",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
	page(name: "selectLutron")
}

def getSwitchCmd(myCmd, n) {
	def result = input myCmd, "text", title: "Lutron Command #$n", required: true
}

def getSwitchName(myName, n) {
	def result = input myName, "text", title: "Device name #$n", required: true
}

def selectLutron() {
	dynamicPage(name: "selectLutron", title: "Lutron and Devices", uninstall: true, install: true) {
		section("Select Lutron device") {
			input "Lutron", "capability.relaySwitch", title: "Lutron device", required: true, multiple: false
			input "Remove", "capability.momentary", title: "Remove button", required: true, multiple: false
			input "howMany", "number", title: "How many devices?", required: true, submitOnChange: true
		}
		section("Select Devices") {
			for (int i = 0; i < howMany; i++) {
				def thisVar = "switchLabel" + "$i"
				def thisName = "switchName" + "$i"
				getSwitchCmd(thisVar, i + 1)
				getSwitchName(thisName, i + 1)
				paragraph(" ")
			}
		}
	}
}

def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def initialize() {
	state.myDevices = [:]
	for (int i = 0 ; i < howMany; i++) {
		def deviceId = app.id + "Lutron" + "$i"
		def myDevice = getChildDevice(deviceId)
		def thisLabel = settings.find {it.key == "switchLabel$i"}
		def thisName = settings.find {it.key == "switchName$i"}
		if(!myDevice) {
			if(thisLabel.value[1] in ['d', 'D']) def childDevice = addChildDevice("smartthings", "Virtual Dimmer", deviceId, null, [label: thisName.value])
			else def childDevice = addChildDevice("smartthings", "On/Off Button Tile", deviceId, null, [label: thisName.value])
		}
		myDevice = getChildDevice(deviceId)
		myDevice.name = thisLabel.value
		if(myDevice.name[0] in ['s', 'S']) {        //  SSI or SDL, build map based on Lutron zone #
			def iloc = myDevice.name.indexOf(',') + 1
			def ndx = myDevice.name.substring(iloc).toInteger()
			state.myDevices << ["$ndx":deviceId]
		}
		if(myDevice.name[1] in ['d', 'D']) {
			subscribe(myDevice, "level", dimmerHandler)
			subscribe(myDevice, "switch", dimOnOffHandler)
		} else subscribe(myDevice, "switch", switchHandler)
	}
	subscribe(Lutron, "msgRcvd", LutronHandler)
	subscribe(Remove, "switch.on", removeHandler)
}

def switchHandler(evt) {
	def myDev = evt.device
	if(evt.value == "on") Lutron.sendMsg("$myDev.name,on") else Lutron.sendMsg("$myDev.name,off")
}

def dimmerHandler(evt) {
	def myDev = evt.device
	Lutron.sendMsg("$myDev.name,$evt.value")
}

def dimOnOffHandler(evt) {
	def myDev = evt.device
	def level = myDev.currentLevel ?: 100
	if(evt.value == "on") Lutron.sendMsg("$myDev.name,$level") else Lutron.sendMsg("$myDev.name,0")
}

def LutronHandler(evt) {
	if (evt.value.startsWith("LZC") && !evt.value.endsWith("CHG")) {
		def isOff = evt.value.endsWith("OFF")
		def ndx = evt.value.substring(4, 6)
		if(ndx[0] == "0") ndx = ndx.substring(1)
		def device = getChildDevice(state.myDevices["$ndx"])
		device.sendEvent(name: "switch", value: isOff ? "off" : "on") //, isStateChange: true, displayed: true)
	}
}


def removeHandler(evt) {
	unsubscribe()
}

def uninstalled() {
	removeChildDevices(getChildDevices())
}

private removeChildDevices(delete) {
	delete.each {
	deleteChildDevice(it.deviceNetworkId)
  }
}
